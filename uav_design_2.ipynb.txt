{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bdbfad5b",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install scipy==1.9.3 --force-reinstall"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dcdf4460",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import scipy\n",
    "# def derivative(func, x0, dx=1e-6, n=1, order=3):\n",
    "#     if n != 1 or order != 3:\n",
    "#         raise NotImplementedError(\"Only n=1 and order=3 supported\")\n",
    "#     return (func(x0 + dx) - func(x0 - dx)) / (2 * dx)\n",
    "\n",
    "# scipy.misc.derivative = derivative\n",
    "\n",
    "import math\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy.interpolate import interp1d\n",
    "from ADRpy import atmospheres as at\n",
    "from importlib import reload\n",
    "import helper_functions\n",
    "helper_functions = reload(helper_functions)\n",
    "from helper_functions import *\n",
    "import specs\n",
    "specs = reload(specs)\n",
    "from specs import *\n",
    "import subprocess\n",
    "import os\n",
    "from airfoils import Airfoil"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cd146068",
   "metadata": {},
   "outputs": [],
   "source": [
    "foil = Airfoil.NACA4('2412')\n",
    "x,y = foil.all_points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ebaebb3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def save_airfoil_as_dat(filename, name, x, y):\n",
    "    \"\"\"\n",
    "    Save airfoil coordinates to a .dat file in Selig format.\n",
    "\n",
    "    Parameters:\n",
    "        filename (str): Path to save the file (e.g., 'NACA2412.dat')\n",
    "        name (str): Airfoil name to be written as the first line\n",
    "        x (array-like): x-coordinates\n",
    "        y (array-like): y-coordinates\n",
    "    \"\"\"\n",
    "    with open(filename, 'w') as f:\n",
    "        f.write(f\"   {name}\\n\")\n",
    "        for xi, yi in zip(x, y):\n",
    "            f.write(f\"  {xi:8.5f}     {yi:8.5f}\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ba5dad50",
   "metadata": {},
   "outputs": [],
   "source": [
    "save_airfoil_as_dat(\"naca2412_coords.dat\", \"NACA2412\", x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "13aca354",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_aerodynamic_coeffs_for_airfoil(correct_airfoil_name_with_space, from_dat=False):\n",
    "    xfoil_path = os.path.join(os.getcwd(), r\"XFOIL6.99\\xfoil.exe\")\n",
    "\n",
    "    # Define the commands to be sent to XFOIL\n",
    "    commands = f\"\"\"\n",
    "    {correct_airfoil_name_with_space}\n",
    "    OPER\n",
    "    VISC 1000000\n",
    "    PACC\n",
    "    {correct_airfoil_name_with_space}.dat\n",
    "\n",
    "    ASEQ -5 15 0.1\n",
    "\n",
    "    QUIT\n",
    "    \"\"\"\n",
    "    if from_dat:\n",
    "        commands = f\"\"\"\n",
    "    LOAD {correct_airfoil_name_with_space}.dat\n",
    "    PANE\n",
    "    OPER\n",
    "    VISC 1000000\n",
    "    PACC\n",
    "    {correct_airfoil_name_with_space}-polar.dat\n",
    "\n",
    "    ASEQ -5 15 0.1\n",
    "\n",
    "    QUIT\n",
    "    \"\"\"\n",
    "\n",
    "    print(commands)\n",
    "    # Write the commands to a temporary file\n",
    "    with open('xfoil_input.txt', 'w') as f:\n",
    "        f.write(commands)\n",
    "\n",
    "    # Execute XFOIL with the input file\n",
    "    with open('xfoil_input.txt', 'r') as input_file, open('xfoil_output.txt', 'w') as output_file:\n",
    "        subprocess.run(xfoil_path, stdin=input_file, stdout=output_file)\n",
    "\n",
    "def load_xfoil_polar(filepath):\n",
    "    with open(filepath, 'r') as f:\n",
    "        lines = f.readlines()\n",
    "\n",
    "    data_lines = []\n",
    "    start_collecting = False\n",
    "\n",
    "    for line in lines:\n",
    "        line = line.strip()\n",
    "\n",
    "        # Identify the line with column headers\n",
    "        if line.startswith(\"alpha\") and \"CL\" in line:\n",
    "            start_collecting = True\n",
    "            continue\n",
    "\n",
    "        # Skip lines until data starts\n",
    "        if start_collecting:\n",
    "            # Stop if blank line or end of numeric data\n",
    "            if not line or not any(char.isdigit() for char in line):\n",
    "                continue\n",
    "\n",
    "            # Try to parse the data\n",
    "            try:\n",
    "                parts = line.split()\n",
    "                if len(parts) == 7:\n",
    "                    alpha, cl, cd, cdp, cm, top_xtr, bot_xtr = map(float, parts)\n",
    "                    data_lines.append([alpha, cl, cd, cdp, cm, top_xtr, bot_xtr])\n",
    "            except ValueError:\n",
    "                continue  # Skip malformed lines\n",
    "\n",
    "    df = pd.DataFrame(data_lines, columns=[\"alpha\", \"CL\", \"CD\", \"CDp\", \"CM\", \"Top_Xtr\", \"Bot_Xtr\"])\n",
    "    return df\n",
    "\n",
    "def get_coefficients_at_alpha(df, alpha):\n",
    "    \"\"\"\n",
    "    Interpolate aerodynamic coefficients from XFOIL polar DataFrame.\n",
    "\n",
    "    Parameters:\n",
    "        df (pd.DataFrame): Must contain 'alpha', 'CL', 'CD', 'CDp', 'CM', 'Top_Xtr', 'Bot_Xtr'\n",
    "        alpha (float): Angle of attack in degrees\n",
    "\n",
    "    Returns:\n",
    "        dict: Interpolated coefficients at the specified alpha\n",
    "    \"\"\"\n",
    "    if df.empty:\n",
    "        raise ValueError(\"Input DataFrame is empty\")\n",
    "\n",
    "    # Ensure the DataFrame is sorted by alpha\n",
    "    df_sorted = df.sort_values(\"alpha\")\n",
    "\n",
    "    # Check alpha bounds\n",
    "    if not (df_sorted[\"alpha\"].min() <= alpha <= df_sorted[\"alpha\"].max()):\n",
    "        raise ValueError(f\"Alpha {alpha} is out of bounds ({df_sorted['alpha'].min()} to {df_sorted['alpha'].max()})\")\n",
    "\n",
    "    # Interpolate each column\n",
    "    coeffs = {}\n",
    "    for col in [\"CL\", \"CD\", \"CDp\", \"CM\", \"Top_Xtr\", \"Bot_Xtr\"]:\n",
    "        coeffs[col] = np.interp(alpha, df_sorted[\"alpha\"], df_sorted[col])\n",
    "\n",
    "    coeffs[\"alpha\"] = alpha\n",
    "    return coeffs\n",
    "\n",
    "def get_cl_alpha_at(df, alpha, delta=0.5):\n",
    "    \"\"\"\n",
    "    Approximates the local lift curve slope dCl/dα at a specified angle of attack.\n",
    "\n",
    "    Parameters:\n",
    "        df (pd.DataFrame): Polar data with columns 'alpha' and 'CL'\n",
    "        alpha (float): Angle of attack in degrees at which to compute the slope\n",
    "        delta (float): Small delta around alpha for finite difference (in degrees)\n",
    "\n",
    "    Returns:\n",
    "        float: Estimated dCl/dα (1/deg)\n",
    "    \"\"\"\n",
    "    df = df.sort_values(\"alpha\")\n",
    "\n",
    "    alpha_min = -5\n",
    "    alpha_max = 10\n",
    "\n",
    "    if not (alpha_min <= alpha - delta and alpha + delta <= alpha_max):\n",
    "        raise ValueError(f\"Alpha ± delta must be within data bounds ({alpha_min} to {alpha_max})\")\n",
    "\n",
    "    # Interpolate CL at alpha ± delta\n",
    "    cl_plus = np.interp(alpha + delta, df[\"alpha\"], df[\"CL\"])\n",
    "    cl_minus = np.interp(alpha - delta, df[\"alpha\"], df[\"CL\"])\n",
    "\n",
    "    cl_alpha = (cl_plus - cl_minus) / (2 * delta)\n",
    "    return cl_alpha\n",
    "\n",
    "def get_row_for_cl(df, target_cl):\n",
    "    \"\"\"\n",
    "    Interpolate the polar data to find the row corresponding to a target CL.\n",
    "\n",
    "    Parameters:\n",
    "        df (pd.DataFrame): Must contain columns 'alpha' and 'CL'\n",
    "        target_cl (float): Desired lift coefficient\n",
    "\n",
    "    Returns:\n",
    "        dict: Interpolated row with keys: alpha, CL, CD, CDp, CM, Top_Xtr, Bot_Xtr\n",
    "    \"\"\"\n",
    "    df = df.sort_values(\"CL\")\n",
    "\n",
    "    if not (df[\"CL\"].min() <= target_cl <= df[\"CL\"].max()):\n",
    "        raise ValueError(f\"CL = {target_cl} is out of bounds ({df['CL'].min()} to {df['CL'].max()})\")\n",
    "\n",
    "    # Find bracketing rows\n",
    "    lower_idx = df[df[\"CL\"] <= target_cl][\"CL\"].idxmax()\n",
    "    upper_idx = df[df[\"CL\"] >= target_cl][\"CL\"].idxmin()\n",
    "\n",
    "    row_low = df.loc[lower_idx]\n",
    "    row_high = df.loc[upper_idx]\n",
    "\n",
    "    if lower_idx == upper_idx:\n",
    "        return row_low.to_dict()  # Exact match\n",
    "\n",
    "    # Linear interpolation factor\n",
    "    t = (target_cl - row_low[\"CL\"]) / (row_high[\"CL\"] - row_low[\"CL\"])\n",
    "\n",
    "    interpolated = {}\n",
    "    for col in [\"alpha\", \"CL\", \"CD\", \"CDp\", \"CM\", \"Top_Xtr\", \"Bot_Xtr\"]:\n",
    "        interpolated[col] = (1 - t) * row_low[col] + t * row_high[col]\n",
    "\n",
    "    return interpolated\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "373439d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# get_aerodynamic_coeffs_for_airfoil(\"s1223\", from_dat=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b48bda8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "airfoil_coeffs_vs_alpha = load_xfoil_polar('NACA 2412.dat')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6176c769",
   "metadata": {},
   "outputs": [],
   "source": [
    "def initial_design_feasibility_pass(current_values, assumed_and_set):\n",
    "    # Unpack Inputs\n",
    "    mtow = current_values[\"mtow\"]\n",
    "    cl_cruise = current_values[\"cl_cruise\"]\n",
    "    cruise_speed_kmh = current_values[\"cruise_speed_kmh\"]\n",
    "    altitude_m = assumed_and_set.get(\"cruise_altitude_m\", 0)\n",
    "    rho = get_air_density(altitude_m)\n",
    "    v_ms = kmh_to_ms(cruise_speed_kmh)\n",
    "\n",
    "    # 1. Calculate Initial Wing Area\n",
    "    current_values[\"wing_area_m2\"] = (2 * mtow * g) / (rho * v_ms**2 * cl_cruise)\n",
    "\n",
    "    # 2. Wing Loading\n",
    "    current_values[\"wing_loading_pa\"] = (mtow * g) / current_values[\"wing_area_m2\"]\n",
    "\n",
    "    # 3. Wing Geometry\n",
    "    AR = current_values[\"aspect_ratio\"]\n",
    "    current_values[\"wing_span_m\"] = (current_values[\"wing_area_m2\"] * AR)**0.5\n",
    "    current_values[\"chord_m\"] = current_values[\"wing_area_m2\"] / current_values[\"wing_span_m\"]\n",
    "\n",
    "    # 4. Fuselage Geometry\n",
    "    fuselage_length = assumed_and_set[\"fuselage_length_mac_coeff\"] * current_values[\"chord_m\"]\n",
    "    current_values[\"fuselage_body_length_m\"] = fuselage_length\n",
    "    current_values[\"wing_le_position_m\"] = assumed_and_set[\"wing_le_position_fuselage_length_coeff\"] * fuselage_length\n",
    "\n",
    "    # 5. Tail Arm and Tail Areas\n",
    "    tail_arm = assumed_and_set[\"horizontal_tail_arm_mac_coeff\"] * current_values[\"chord_m\"]\n",
    "    current_values[\"tail_arm_m\"] = tail_arm\n",
    "    Vh = assumed_and_set[\"horizontal_tail_volume_coefficient\"]\n",
    "    Vv = assumed_and_set[\"vertical_tail_volume_coefficient\"]\n",
    "    current_values[\"horizontal_tail_area_m2\"] = Vh * current_values[\"wing_area_m2\"] * current_values[\"chord_m\"] / tail_arm\n",
    "    current_values[\"vertical_tail_area_m2\"] = Vv * current_values[\"wing_area_m2\"] * current_values[\"wing_span_m\"] / tail_arm\n",
    "\n",
    "    return current_values\n",
    "\n",
    "\n",
    "def stability_analysis(\n",
    "    chord_m,\n",
    "    cg_m,\n",
    "    tail_volume_coeff,\n",
    "    wing_le_position_m\n",
    "):\n",
    "    Vh = tail_volume_coeff\n",
    "\n",
    "    neutral_point_m = wing_le_position_m + 0.25 * chord_m + Vh * chord_m\n",
    "    static_margin = (neutral_point_m - cg_m) / chord_m\n",
    "\n",
    "\n",
    "    return {\n",
    "        \"neutral_point_m\": neutral_point_m,\n",
    "        \"static_margin\": static_margin,\n",
    "    }\n",
    "\n",
    "def cruise_trim_analysis(\n",
    "    neutral_point_m,\n",
    "    cg_from_nose,\n",
    "    cl_cruise,\n",
    "    tail_arm_m,\n",
    "    eta_h,\n",
    "):\n",
    "    cl_tail = (cg_from_nose - neutral_point_m) * cl_cruise / tail_arm_m\n",
    "    alpha_tail = get_row_for_cl(airfoil_coeffs_vs_alpha, cl_tail)[\"alpha\"]\n",
    "    cl_alpha_tail =  get_cl_alpha_at(airfoil_coeffs_vs_alpha, alpha_tail, delta=0.1) # from airfoil data at Re=500k\n",
    "\n",
    "    # print(cl_tail,alpha_tail, cl_alpha_tail)\n",
    "    delta_e_rad = cl_tail / (cl_alpha_tail * eta_h)\n",
    "    delta_e_deg = np.degrees(delta_e_rad)\n",
    "    \n",
    "    return {\n",
    "        \"cl_tail_required\": cl_tail,\n",
    "        \"delta_elevator_deg\": delta_e_deg,\n",
    "    }\n",
    "\n",
    "def tail_geometry(area_m2, aspect_ratio):\n",
    "    span_m = (area_m2 * aspect_ratio) ** 0.5\n",
    "    chord_m = area_m2 / span_m\n",
    "    return span_m, chord_m\n",
    "    \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "19a64e86",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_fuselage_mass(fuselage_length, fuselage_width, fuselage_height, assumed_and_set):\n",
    "    skin_thickness = sandwich_specs[\"fuselage\"][\"total_thickness_m\"] - sandwich_specs[\"fuselage\"][\"core_thickness_m\"]\n",
    "    skin_cross_sectional_cirfumferance = (fuselage_width + fuselage_height)\n",
    "    skin_cross_sectional_area = skin_cross_sectional_cirfumferance * skin_thickness\n",
    "    total_skin_volume = fuselage_length * skin_cross_sectional_area\n",
    "    skin_density = assumed_and_set[\"gfrp_density_kgm3\"]\n",
    "    total_skin_mass = total_skin_volume * skin_density\n",
    "    \n",
    "    core_thickness = sandwich_specs[\"fuselage\"][\"core_thickness_m\"]\n",
    "    core_cross_sectional_cirfumferance = 2 * (fuselage_width + fuselage_height)\n",
    "    core_cross_sectional_area = core_cross_sectional_cirfumferance * core_thickness\n",
    "    total_core_volume = fuselage_length * core_cross_sectional_area\n",
    "    core_density = assumed_and_set[\"core_density_kgm3\"]\n",
    "    total_core_mass = total_core_volume * core_density\n",
    "\n",
    "    total_fuselage_mass = total_skin_mass + total_core_mass\n",
    "\n",
    "    return total_fuselage_mass\n",
    "\n",
    "def airfoil_perimeter_length(x, y, chord):\n",
    "    \"\"\"\n",
    "    Compute total surface length of an airfoil given x and y coordinates.\n",
    "\n",
    "    Parameters:\n",
    "        x (array-like): x coordinates of the airfoil surface\n",
    "        y (array-like): y coordinates of the airfoil surface\n",
    "\n",
    "    Returns:\n",
    "        float: total length along the airfoil perimeter\n",
    "    \"\"\"\n",
    "    x = np.array(x)\n",
    "    y = np.array(y)\n",
    "\n",
    "    dx = np.diff(x)\n",
    "    dy = np.diff(y)\n",
    "    segment_lengths = np.sqrt(dx**2 + dy**2)\n",
    "    total_length = np.sum(segment_lengths) * chord\n",
    "    \n",
    "    return total_length\n",
    "\n",
    "def get_wing_or_tail_mass(span, cross_section_perimeter_length, tail_or_wing, assumed_and_set):\n",
    "\n",
    "    \n",
    "    skin_thickness = sandwich_specs[tail_or_wing][\"total_thickness_m\"] - sandwich_specs[tail_or_wing][\"core_thickness_m\"]\n",
    "    skin_cross_sectional_cirfumferance = cross_section_perimeter_length\n",
    "    skin_cross_sectional_area = skin_cross_sectional_cirfumferance * skin_thickness\n",
    "    total_skin_volume = span * skin_cross_sectional_area\n",
    "    skin_density = assumed_and_set[\"gfrp_density_kgm3\"]\n",
    "    total_skin_mass = total_skin_volume * skin_density\n",
    "    \n",
    "    core_thickness = sandwich_specs[tail_or_wing][\"core_thickness_m\"]\n",
    "    core_cross_sectional_cirfumferance = cross_section_perimeter_length\n",
    "    core_cross_sectional_area = core_cross_sectional_cirfumferance * core_thickness\n",
    "    total_core_volume = span * core_cross_sectional_area\n",
    "    core_density = assumed_and_set[\"core_density_kgm3\"]\n",
    "    total_core_mass = total_core_volume * core_density\n",
    "\n",
    "    total_wing_mass = total_skin_mass + total_core_mass\n",
    "\n",
    "    return total_wing_mass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "09daa4f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def size_fuselage_diameter_as_per_payload(internal_payload_count, internal_payload_diameter):\n",
    "    n = internal_payload_count     # number of cylinders\n",
    "    d = internal_payload_diameter  # cylinder diameter (m)\n",
    "    s = 0.02               # spacing between cylinders (m)\n",
    "    t = 0.015              # carousel mechanism radial thickness (m)\n",
    "\n",
    "    # 1. Effective diameter\n",
    "    d_eff = d + s\n",
    "\n",
    "    # 2. Center-to-center radius\n",
    "    r_center = d_eff / (2 * math.sin(math.pi / n))\n",
    "\n",
    "    # 3. Outer radius including half the effective diameter\n",
    "    R_cylinders = r_center + d_eff/2\n",
    "\n",
    "    # 4. Add carousel thickness\n",
    "    R_total = R_cylinders + t\n",
    "\n",
    "    # 5. Required fuselage diameter\n",
    "    D_required = 2 * R_total\n",
    "\n",
    "    return D_required + 0.03\n",
    "\n",
    "def initial_size_fuselage(hard_constraints, assumed_and_set, iterable_constraints, fuselage_tank_in_wing_root=True):\n",
    "\n",
    "    nose_for_ballast_and_aerodynamics_length = 0.5\n",
    "    ## fuel\n",
    "\n",
    "    # fuel_volume = (iterable_constraints[\"fuel_kg\"] / assumed_and_set[\"fuel_density_kgL\"]) / 1000\n",
    "\n",
    "    # fuselage_cross_section_area = 0.6*0.45 # sized around engine cross section\n",
    "    # fuselage_length_for_fuel = 0.03 + (fuel_volume / fuselage_cross_section_area)\n",
    "    fuselage_length_for_fuel = assumed_and_set[\"fuselage_fuel_tank_length\"]\n",
    "    \n",
    "    # ## payload\n",
    "\n",
    "    internal_payload_length = hard_constraints[\"internal_payload_length\"]\n",
    "\n",
    "    \n",
    "    ## avionics (computers, sensors, camera)\n",
    "\n",
    "    fuselage_length_for_avionics = 0.7 # m \n",
    "\n",
    "    ## wing root requirements\n",
    "\n",
    "    fuselage_length_for_wing_root = 1.2 * iterable_constraints[\"chord_m\"] # this would include the center wing box\n",
    "\n",
    "    ## powerplant\n",
    "\n",
    "    fuselage_length_for_engine = 1 # engine length is 0.7 , added 0.3 for filters and controls\n",
    "\n",
    "    if fuselage_tank_in_wing_root:\n",
    "        total_fuselage_length = nose_for_ballast_and_aerodynamics_length + internal_payload_length + fuselage_length_for_avionics + fuselage_length_for_wing_root + fuselage_length_for_engine\n",
    "    else:\n",
    "        total_fuselage_length = nose_for_ballast_and_aerodynamics_length + fuselage_length_for_fuel + internal_payload_length + fuselage_length_for_avionics + fuselage_length_for_wing_root + fuselage_length_for_engine\n",
    "\n",
    "    return total_fuselage_length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ff5db026",
   "metadata": {},
   "outputs": [],
   "source": [
    "def refine_design_from_iterable_constraints(hard_constraints, assumed_and_set, weights_dict_kg_no_fuel, iterable_constraints, target_error=0.02, max_iterations=10):\n",
    "    # populate constants and constraints\n",
    "    current_values = iterable_constraints.copy()\n",
    "\n",
    "    prev_values = current_values.copy()\n",
    "\n",
    "    for i in range(max_iterations):\n",
    "\n",
    "        ## cruise iterations\n",
    "\n",
    "        # print(f\"[Iter {i+1}] \" + \" | \".join([f\"{k}: {v:.4f}\" if isinstance(v, float) else f\"{k}: {v}\" for k, v in current_values.items()]))\n",
    "        \n",
    "        h_tail_te_position = current_values[\"tail_arm_m\"] + current_values[\"cruiseout_cg_from_nose_m\"] + 0.75*current_values[\"h_tail_chord_m\"]\n",
    "        # print(current_values[\"fuselage_body_length_m\"], h_tail_te_position)\n",
    "        \n",
    "        cruiseout_v_ms = kmh_to_ms(current_values[\"cruiseout_speed_kmh\"])\n",
    "        rho = get_air_density(hard_constraints[\"cruise_altitude_m\"])\n",
    "        current_values[\"wing_area_m2\"] = calc_required_wing_area(current_values[\"mtow\"], current_values[\"cruiseout_cl\"], rho, cruiseout_v_ms)\n",
    "        \n",
    "        ## cruise out calculations\n",
    "        # Aerodynamics \n",
    "        cruiseout_mtow = current_values[\"mtow\"]\n",
    "        current_values[\"cruiseout_cl\"] = calc_cl_cruise(cruiseout_mtow, current_values[\"cruiseout_speed_kmh\"], current_values[\"wing_area_m2\"], hard_constraints[\"cruise_altitude_m\"])\n",
    "        current_values[\"cruiseout_angle_of_attack_deg\"] = get_row_for_cl(airfoil_coeffs_vs_alpha, current_values[\"cruiseout_cl\"])[\"alpha\"]\n",
    "        current_values[\"cruiseout_cd\"] = calc_cd_total(airfoil_coeffs_vs_alpha[\"CD\"].min(), current_values[\"cruiseout_cl\"], assumed_and_set[\"aspect_ratio\"])\n",
    "        current_values[\"cruiseout_lift_to_drag\"] = current_values[\"cruiseout_cl\"] / current_values[\"cruiseout_cd\"]\n",
    "        cruiseout_drag_n = 0.5 * rho * cruiseout_v_ms**2 * current_values[\"wing_area_m2\"] * current_values[\"cruiseout_cd\"]\n",
    "        cruiseout_power_kw = cruiseout_drag_n * cruiseout_v_ms / propeller_specs[\"efficiency\"][\"cruise\"] / engine_specs[\"gear_box_efficiency\"] / 1000  # kW\n",
    "        current_values[\"cruiseout_power_kw\"] = cruiseout_power_kw\n",
    "\n",
    "        # Engine interpolation\n",
    "        cruiseout_sfc_data = estimate_cruise_sfc_from_dicts(engine_power_to_rpm, engine_sfc_to_rpm, cruiseout_power_kw)\n",
    "        current_values[\"cruiseout_sfc\"] = cruiseout_sfc_data[\"sfc_cruise\"]\n",
    "        current_values[\"cruiseout_rpm\"] = cruiseout_sfc_data[\"rpm_cruise\"]\n",
    "        current_values[\"cruiseout_time\"] = hard_constraints[\"target_station_distance_km\"] / current_values[\"cruiseout_speed_kmh\"] # in hours\n",
    "\n",
    "        cruiseout_fuel_requirement = cruiseout_power_kw * current_values[\"cruiseout_time\"] * current_values[\"cruiseout_sfc\"] \n",
    "\n",
    "        ## loiter calculations\n",
    "        # Aerodynamics \n",
    "        loiter_v_ms = kmh_to_ms(current_values[\"loiter_speed_kmh\"])\n",
    "        loiter_mtow = current_values[\"mtow\"] - cruiseout_fuel_requirement\n",
    "        current_values[\"loiter_cl\"] = calc_cl_cruise(loiter_mtow, current_values[\"loiter_speed_kmh\"], current_values[\"wing_area_m2\"], hard_constraints[\"cruise_altitude_m\"])\n",
    "        current_values[\"loiter_angle_of_attack_deg\"] = get_row_for_cl(airfoil_coeffs_vs_alpha, current_values[\"loiter_cl\"])[\"alpha\"]\n",
    "        current_values[\"loiter_cd\"] = calc_cd_total(airfoil_coeffs_vs_alpha[\"CD\"].min(), current_values[\"loiter_cl\"], assumed_and_set[\"aspect_ratio\"])\n",
    "        current_values[\"loiter_lift_to_drag\"] = current_values[\"loiter_cl\"] / current_values[\"loiter_cd\"]\n",
    "        loiter_drag_n = 0.5 * rho * loiter_v_ms**2 * current_values[\"wing_area_m2\"] * current_values[\"loiter_cd\"]\n",
    "        loiter_power_kw = loiter_drag_n * loiter_v_ms / propeller_specs[\"efficiency\"][\"cruise\"] / engine_specs[\"gear_box_efficiency\"] / 1000  # kW\n",
    "        current_values[\"loiter_power_kw\"] = loiter_power_kw\n",
    "\n",
    "        # Engine interpolation\n",
    "        loiter_sfc_data = estimate_cruise_sfc_from_dicts(engine_power_to_rpm, engine_sfc_to_rpm, loiter_power_kw)\n",
    "        current_values[\"loiter_sfc\"] = loiter_sfc_data[\"sfc_cruise\"]\n",
    "        current_values[\"loiter_rpm\"] = loiter_sfc_data[\"rpm_cruise\"]\n",
    "\n",
    "        loiter_fuel_requirement = loiter_power_kw * hard_constraints[\"loiter_time\"] * 1.1 * current_values[\"loiter_sfc\"] \n",
    "\n",
    "        estimate_loiter_fuel = loiter_power_kw * hard_constraints[\"loiter_time\"] * 1.1 * current_values[\"cruiseout_sfc\"] ## 1.2 is a multiplier to estimate the increased SFC at the lower RPM during loiter\n",
    "        \n",
    "\n",
    "        ## cruise back calculations\n",
    "        # Aerodynamics \n",
    "        cruiseback_v_ms = kmh_to_ms(current_values[\"cruiseback_speed_kmh\"])\n",
    "        cruiseback_mtow = current_values[\"mtow\"] - cruiseout_fuel_requirement - loiter_fuel_requirement - hard_constraints[\"internal_payload_mass\"] - hard_constraints[\"wing_payload_mass\"]\n",
    "        current_values[\"cruiseback_cl\"] = calc_cl_cruise(cruiseback_mtow, current_values[\"cruiseback_speed_kmh\"], current_values[\"wing_area_m2\"], hard_constraints[\"cruise_altitude_m\"])\n",
    "        current_values[\"cruiseback_angle_of_attack_deg\"] = get_row_for_cl(airfoil_coeffs_vs_alpha, current_values[\"cruiseback_cl\"])[\"alpha\"]\n",
    "        current_values[\"cruiseback_cd\"] = calc_cd_total(airfoil_coeffs_vs_alpha[\"CD\"].min(), current_values[\"cruiseback_cl\"], assumed_and_set[\"aspect_ratio\"])\n",
    "        current_values[\"cruiseback_lift_to_drag\"] = current_values[\"cruiseback_cl\"] / current_values[\"cruiseback_cd\"]\n",
    "        cruiseback_drag_n = 0.5 * rho * cruiseback_v_ms**2 * current_values[\"wing_area_m2\"] * current_values[\"cruiseback_cd\"]\n",
    "        cruiseback_power_kw = cruiseback_drag_n * cruiseback_v_ms / propeller_specs[\"efficiency\"][\"cruise\"] / engine_specs[\"gear_box_efficiency\"] / 1000  # kW\n",
    "        current_values[\"cruiseback_power_kw\"] = cruiseback_power_kw\n",
    "\n",
    "        # Engine interpolation\n",
    "        cruiseback_sfc_data = estimate_cruise_sfc_from_dicts(engine_power_to_rpm, engine_sfc_to_rpm, cruiseback_power_kw)\n",
    "        current_values[\"cruiseback_sfc\"] = cruiseback_sfc_data[\"sfc_cruise\"]\n",
    "        current_values[\"cruiseback_rpm\"] = cruiseback_sfc_data[\"rpm_cruise\"]\n",
    "        current_values[\"cruiseback_time\"] = hard_constraints[\"target_station_distance_km\"] / current_values[\"cruiseback_speed_kmh\"] # in hours\n",
    "\n",
    "        cruiseback_fuel_requirement = cruiseback_power_kw * current_values[\"cruiseback_time\"] * current_values[\"cruiseback_sfc\"] \n",
    "\n",
    "\n",
    "        current_values[\"fuel_kg\"] = cruiseout_fuel_requirement + estimate_loiter_fuel + cruiseback_fuel_requirement\n",
    "\n",
    "        current_values[\"mtow\"]  = sum(weights_dict_kg_no_fuel.values()) + current_values[\"fuel_kg\"]\n",
    "\n",
    "        # Wing geometry - stays fixed for following flight stages\n",
    "        current_values[\"wing_area_m2\"] = calc_required_wing_area(current_values[\"mtow\"], current_values[\"cruiseout_cl\"], rho, cruiseout_v_ms)\n",
    "        current_values[\"wing_span_m\"] = np.sqrt(current_values[\"wing_area_m2\"] * assumed_and_set[\"aspect_ratio\"])\n",
    "        current_values[\"chord_m\"] = current_values[\"wing_area_m2\"] / current_values[\"wing_span_m\"]\n",
    "        current_values[\"wing_loading_pa\"] = current_values[\"mtow\"] * g / current_values[\"wing_area_m2\"] \n",
    "\n",
    "        current_values[\"tail_arm_m\"] = assumed_and_set[\"horizontal_tail_arm_mac_coeff\"] * current_values[\"chord_m\"]\n",
    "\n",
    "        # --- Horizontal Tail Area (S_h) ---\n",
    "        current_values[\"horizontal_tail_area_m2\"] = assumed_and_set[\"horizontal_tail_volume_coefficient\"] *  (current_values[\"wing_area_m2\"] * current_values[\"chord_m\"]) / current_values[\"tail_arm_m\"]\n",
    "        \n",
    "\n",
    "        current_values[\"h_tail_span_m\"], current_values[\"h_tail_chord_m\"] = tail_geometry(current_values[\"horizontal_tail_area_m2\"], assumed_and_set[\"AR_horizontal\"])\n",
    "        \n",
    "        # --- Vertical Tail Area (S_v) ---\n",
    "        current_values[\"vertical_tail_area_m2\"] = assumed_and_set[\"vertical_tail_volume_coefficient\"] *(current_values[\"wing_area_m2\"] * current_values[\"wing_span_m\"]) /current_values[\"tail_arm_m\"]\n",
    "        \n",
    "\n",
    "        current_values[\"v_tail_span_m\"], current_values[\"v_tail_chord_m\"] = tail_geometry(current_values[\"vertical_tail_area_m2\"], assumed_and_set[\"AR_vertical\"])\n",
    "        # current_values[\"v_tail_span_m\"], current_values[\"v_tail_chord_m\"] = tail_geometry(current_values[\"vertical_tail_area_m2\"], 2.0)  # Assuming AR of 2.0 for vertical tail\n",
    "\n",
    "\n",
    "        # --- Fuselage Geometry ---\n",
    "        \n",
    "\n",
    "        current_values[\"fuselage_body_length_m\"] = initial_size_fuselage(hard_constraints, assumed_and_set, current_values, False)\n",
    "        # current_values[\"fuselage_body_length_m\"] = h_tail_te_position\n",
    "\n",
    "        # current_values[\"fuselage_tail_arm_extension_m\"] = max(0, h_tail_te_position - current_values[\"fuselage_body_length_m\"])\n",
    "\n",
    "        # if current_values[\"fuselage_tail_arm_extension_m\"] == 0:\n",
    "        wing_le_position_m = assumed_and_set[\"wing_le_position_fuselage_length_coeff\"] * current_values[\"fuselage_body_length_m\"]\n",
    "        current_values[\"wing_le_position_m\"] = wing_le_position_m\n",
    "        \n",
    "\n",
    "        # --- range, endurance, and fuel requirements ---\n",
    "\n",
    "        cruise_fuel = cruiseout_fuel_requirement\n",
    "        loiter_fuel = loiter_fuel_requirement\n",
    "\n",
    "        cb = current_values[\"loiter_sfc\"]\n",
    "        rho = get_air_density(hard_constraints[\"cruise_altitude_m\"])\n",
    "        w_0 = (current_values[\"mtow\"] - cruise_fuel ) * g\n",
    "        w_f = (current_values[\"mtow\"] - cruise_fuel - loiter_fuel) * g\n",
    "\n",
    "        Breguet_endurance = current_values[\"loiter_lift_to_drag\"] * (1/cb) * np.log(w_0/w_f)\n",
    "\n",
    "        current_values[\"calculated_loiter_time\"] = Breguet_endurance  # in hours\n",
    "\n",
    "        ## fuel tank calculations\n",
    "        current_values[\"required_fuel_volume_m3\"] = current_values[\"fuel_kg\"] / assumed_and_set[\"fuel_density_kgL\"] / 1000\n",
    "        current_values[\"max_theoretical_range\"] = current_values[\"cruiseout_speed_kmh\"]  * (current_values[\"fuel_kg\"]/2) / (current_values[\"cruiseout_power_kw\"] * current_values[\"cruiseout_sfc\"])\n",
    "\n",
    "        fuselage_cross_section_area = (current_values[\"fuselage_body_width_m\"] - 2*sandwich_specs[\"fuselage\"][\"total_thickness_m\"] - 0.02) *( current_values[\"fuselage_body_height_m\"] - 2*sandwich_specs[\"fuselage\"][\"total_thickness_m\"] - 0.02)\n",
    "        fuselage_fuel_tank = assumed_and_set[\"fuselage_fuel_tank_length\"] * fuselage_cross_section_area #cross_section_area_fuselage_fuel_tank(iterable_constraints[\"fuselage_diameter_m\"], 0.8)\n",
    "        wing_fuel_tank = wing_fuel_tank_volume(\"naca2412_coords.dat\", current_values, 0.25, 0.65)\n",
    "        current_values[\"space_available_for_fuel_m3\"] = fuselage_fuel_tank + wing_fuel_tank\n",
    "        \n",
    "        if current_values[\"required_fuel_volume_m3\"] < fuselage_fuel_tank:\n",
    "            fuselage_fuel = current_values[\"fuel_kg\"]\n",
    "        else:\n",
    "            fuselage_fuel = fuselage_fuel_tank * 1000 * assumed_and_set[\"fuel_density_kgL\"]  \n",
    "\n",
    "        wing_fuel = current_values[\"fuel_kg\"] - fuselage_fuel\n",
    "\n",
    "        # airframe mass estimation\n",
    "\n",
    "        fuselage_mass = get_fuselage_mass(current_values[\"fuselage_body_length_m\"], current_values[\"fuselage_body_width_m\"], \n",
    "                                          current_values[\"fuselage_body_height_m\"], assumed_and_set) * assumed_and_set[\"fuselage_internal_supports_mass_multiplier\"]\n",
    "        weights_dict_kg_no_fuel[\"fuselage\"] = fuselage_mass\n",
    "\n",
    "        wing_cross_section_perimeter_length = airfoil_perimeter_length(x, y, current_values[\"chord_m\"])\n",
    "        wing_mass = get_wing_or_tail_mass(current_values[\"wing_span_m\"], wing_cross_section_perimeter_length,\"wing\", assumed_and_set) * assumed_and_set[\"wing_internal_supports_mass_multiplier\"]\n",
    "        weights_dict_kg_no_fuel[\"wing\"] = wing_mass\n",
    "        \n",
    "        horizontal_tail_perimeter = airfoil_perimeter_length(x, y, current_values[\"h_tail_chord_m\"])\n",
    "        horizontal_tail_mass = get_wing_or_tail_mass(current_values[\"h_tail_span_m\"], horizontal_tail_perimeter,\"tail\", assumed_and_set) * assumed_and_set[\"tail_internal_supports_mass_multiplier\"]\n",
    "\n",
    "        vertical_tail_perimeter = airfoil_perimeter_length(x, y, current_values[\"v_tail_chord_m\"])\n",
    "        vertical_tail_mass = get_wing_or_tail_mass(current_values[\"v_tail_span_m\"], vertical_tail_perimeter,\"tail\", assumed_and_set) * assumed_and_set[\"tail_internal_supports_mass_multiplier\"]\n",
    "        \n",
    "        weights_dict_kg_no_fuel[\"tails\"] = horizontal_tail_mass + vertical_tail_mass\n",
    "        \n",
    "        #cg position estimation\n",
    "        weights_for_cg = weights_dict_kg_no_fuel.copy()\n",
    "        weights_for_cg[\"fuselage_fuel\"] = fuselage_fuel\n",
    "        weights_for_cg[\"wing_fuel\"] = wing_fuel\n",
    "\n",
    "\n",
    "        #post payload drop\n",
    "        # post_weights_for_cg = weights_for_cg.copy()\n",
    "        # post_weights_for_cg[\"payload\"] = 0.0\n",
    "        # post_weights_for_cg[\"fuel\"] = current_values[\"fuel_kg\"] - cruise_fuel - loiter_fuel\n",
    "\n",
    "        component_positions_m = estimate_component_positions(\n",
    "            fuselage_length=current_values[\"fuselage_body_length_m\"],\n",
    "            wing_le_position=wing_le_position_m,\n",
    "            chord=current_values[\"chord_m\"],\n",
    "            tail_arm=current_values[\"tail_arm_m\"],\n",
    "            internal_payload_length=hard_constraints[\"internal_payload_length\"],\n",
    "            fuselage_fuel_tank_length=assumed_and_set[\"fuselage_fuel_tank_length\"],\n",
    "            cg_estimate=current_values[\"cruiseout_cg_from_nose_m\"],\n",
    "        )\n",
    "\n",
    "        current_values[\"cruiseout_cg_from_nose_m\"] = calculate_cg(weights_for_cg, component_positions_m)\n",
    "\n",
    "        cruise_out_stability_dict = stability_analysis(current_values[\"chord_m\"], current_values[\"cruiseout_cg_from_nose_m\"], \n",
    "                                                       assumed_and_set[\"horizontal_tail_volume_coefficient\"], current_values[\"wing_le_position_m\"])\n",
    "        \n",
    "        current_values[\"neutral_point_m\"] = cruise_out_stability_dict[\"neutral_point_m\"]\n",
    "        current_values[\"cruiseout_static_margin\"] = cruise_out_stability_dict[\"static_margin\"]\n",
    "\n",
    "        # print(f\"Static Margin: {current_values['static_margin']:.4f} | Static Margin Post Drop: {post_drop_vals['static_margin']:.4f}\")\n",
    "        eta_h = calculate_eta_h(current_values[\"wing_span_m\"], current_values[\"tail_arm_m\"])\n",
    "        \n",
    "        trim_dict = cruise_trim_analysis(current_values[\"neutral_point_m\"], current_values[\"cruiseout_cg_from_nose_m\"], \n",
    "                                              current_values[\"cruiseout_cl\"], current_values[\"tail_arm_m\"], eta_h)\n",
    "        \n",
    "        current_values[\"cruiseout_cl_tail_required\"] = trim_dict[\"cl_tail_required\"]\n",
    "        current_values[\"cruiseout_delta_elevator_deg\"] = trim_dict[\"delta_elevator_deg\"]\n",
    "        \n",
    "        \n",
    "        relative_errors = {\n",
    "            k: abs(current_values[k] - prev_values[k]) / max(abs(current_values[k]), 1e-6)\n",
    "            for k in current_values\n",
    "        }\n",
    "\n",
    "        \n",
    "        for iter_key in prev_values:\n",
    "            prev_values[iter_key] = current_values[iter_key]  # ← updates global dict\n",
    "\n",
    "        if all(err < target_error for err in relative_errors.values()):\n",
    "\n",
    "            for iter_key in iterable_constraints:\n",
    "                iterable_constraints[iter_key] = current_values[iter_key]  # ← updates global dict\n",
    "                \n",
    "            if current_values[\"required_fuel_volume_m3\"] > current_values[\"space_available_for_fuel_m3\"]:\n",
    "                print(f\"❌ Design failed: Required fuel volume {current_values['required_fuel_volume_m3']:.5f} m³ exceeds available space {current_values['space_available_for_fuel_m3']:.5f} m³.\")\n",
    "                return current_values\n",
    "            \n",
    "            \n",
    "            print(f\"Converged in {i+1} iterations.\")\n",
    "            return current_values\n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "    return current_values\n",
    "    # raise ValueError(\"Design iteration did not converge.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f5f630d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Converged in 12 iterations.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "assumed_and_set = {\n",
    "    # Mission requirements\n",
    "    \"rolling_resistance_coefficient\": 0.04, # dimensionless   \n",
    "    \"target_drop_altitude_m\": 2500,\n",
    "    \"sea_level_air_density\": get_air_density(0),\n",
    "    \"horizontal_tail_volume_coefficient\": 0.75, # dimensionless\n",
    "    \"vertical_tail_volume_coefficient\": 0.03, # dimensionless\n",
    "    \"horizontal_tail_arm_mac_coeff\": 3, # dimensionless\n",
    "    # \"fuselage_length_mac_coeff\": 5, # dimensionless\n",
    "    \"wing_le_position_fuselage_length_coeff\": 0.5, # dimensionless\n",
    "    # Configuration\n",
    "    \"fuel_density_kgL\": 0.74,\n",
    "    \"gfrp_thickness_m\": 0.0015, # meters\n",
    "    \"gfrp_density_kgm3\": 2150, # kg/m^3\n",
    "    \"core_density_kgm3\": 60,\n",
    "    \"fuselage_fuel_tank_length\": 0.55, #meters\n",
    "    \"fuselage_internal_supports_mass_multiplier\": 1.3,\n",
    "    \"wing_internal_supports_mass_multiplier\": 1.3,\n",
    "    \"tail_internal_supports_mass_multiplier\": 1.1,\n",
    "    \"aspect_ratio\": 14  , # starting assumption\n",
    "    \"AR_horizontal\": 4.0,                # aspect ratio of horizontal tail\n",
    "    \"AR_vertical\": 2.0,                  # aspect ratio of vertical tail\n",
    "    # \"cl_alpha\" : 8.44, # cl / angle of attack slope in (rad). taken from airfoil data\n",
    "    \"loiter_drag_multiplier\": 1.05, ## assumes 5% extra drag due to turns, lower speed, and loss of energy\n",
    "}\n",
    "\n",
    "hard_constraints = {\n",
    "    \"wing_payload_mass\" : 100, # kg\n",
    "    \"internal_payload_mass\": 100, #kg\n",
    "    \"internal_payload_length\": 1.3, # meter\n",
    "    \"target_station_distance_km\": 100,\n",
    "    \"loiter_time\": 1, # hours\n",
    "    \"takeoff_distance_max_m\": 50, # dirt road\n",
    "    \"climb_time_min\": 13, # minutes\n",
    "    \"cruise_altitude_m\": 2500,  \n",
    "}\n",
    "\n",
    "weights_dict_kg_no_fuel = {\n",
    "    \"fuselage\": 40,\n",
    "    \"wing\": 230,\n",
    "    \"tails\": 10,\n",
    "    \"internal_payload\": hard_constraints[\"internal_payload_mass\"],\n",
    "    \"wing_payload\": hard_constraints[\"wing_payload_mass\"],\n",
    "    \"engine\": engine_specs[\"dry_weight_kg\"],\n",
    "    \"propeller\": propeller_specs[\"weight_kg\"],\n",
    "    \"avionics\": 40,\n",
    "    \"landing_gear\": 20,\n",
    "    \"misc\": 10,\n",
    "}\n",
    "\n",
    "iterable_constraints = {\n",
    "\n",
    "    ## structural design variables\n",
    "    #################################\n",
    "    \"wing_area_m2\": 16, # starting assumption\n",
    "    \"wing_loading_pa\": 500,\n",
    "    \"wing_span_m\": 16, # meters\n",
    "    \"chord_m\": 1,  # meters\n",
    "    \"neutral_point_m\": 2.5, # meters\n",
    "    \"wing_le_position_m\": 1.2824, # meters — same as before\n",
    "    \n",
    "    ## fuselage square section \"body\"\n",
    "    \"fuselage_body_length_m\": 4.9,     # meters — same as before\n",
    "    \"fuselage_body_width_m\": 0.62,     # meters — same as before\n",
    "    \"fuselage_body_height_m\": 0.45,     # meters — same as before\n",
    "    \"fuselage_tail_arm_extension_m\": 0, # meter\n",
    "    ## fuselage nose section\n",
    "\n",
    "\n",
    "\n",
    "    \"space_available_for_fuel_m3\": 0.05, # available space for fuel (m^3)\n",
    "\n",
    "    \"tail_arm_m\": 2.3659,  # meters\n",
    "\n",
    "    \"horizontal_tail_area_m2\": 0.4351,    # square meters\n",
    "    \"h_tail_chord_m\": 0.2579,               # meters\n",
    "    \"h_tail_span_m\": 1.0,                  # meters\n",
    "\n",
    "    \"vertical_tail_area_m2\": 0.1741,      # square meters\n",
    "    \"v_tail_chord_m\": 0.1741,              # meters\n",
    "    \"v_tail_span_m\": 1.0,                  # meters\n",
    "\n",
    "    ## performance design variables\n",
    "    ###################################\n",
    "    \"required_fuel_volume_m3\": 0.02, # required fuel volume (m^3)\n",
    "    \"max_theoretical_range\": 1.25*hard_constraints[\"target_station_distance_km\"], # maximum theoretical range (km)\n",
    "    \"stall_speed_kmh\": 55, # stall speed (km/h)\n",
    "    \"fuel_kg\": 30, # kg starting assumption\n",
    "    \"mtow\": sum(weights_dict_kg_no_fuel.values()) + 30, # starting assumption\n",
    "\n",
    "\n",
    "    ## cruise out variables\n",
    "    ##############################\n",
    "    \"cruiseout_speed_kmh\": 130, #km/h\n",
    "    \"cruiseout_wing_loading_pa\": 180, # starting assumption\n",
    "    \"cruiseout_cg_from_nose_m\": 2.5,                # meters\n",
    "    \"cruiseout_cl\": 0.8, # lift coefficient at cruise\n",
    "    \"cruiseout_cd\" : 0.05, # drag coefficient at cruise\n",
    "    \"cruiseout_lift_to_drag\": 16, # lift-to-drag ratio at cruise\n",
    "    \"cruiseout_sfc\": 0.5, # specific fuel consumption at cruise (kg/kWh)\n",
    "    \"cruiseout_rpm\": 5000, # engine RPM at cruise\n",
    "    \"cruiseout_power_kw\": 8, # power required at cruise (kW)\n",
    "    \"cruiseout_static_margin\": 0.1, # static margin (dimensionless)\n",
    "    \"cruiseout_delta_elevator_deg\": 5, # elevator deflection angle (degrees)\n",
    "    \"cruiseout_cl_tail_required\": -0.04, # required lift coefficient for tail\n",
    "    \"cruiseout_angle_of_attack_deg\": 5, # needs to be converted to radians for calculations\n",
    "    \n",
    "    \"cruiseout_time\": 3, # cruise time (hours)\n",
    "\n",
    "    ## loiter variables\n",
    "    ###############################\n",
    "    \"loiter_speed_kmh\": 100, #km/h\n",
    "    \"loiter_wing_loading_pa\": 180, # starting assumption\n",
    "    \"loiter_cg_from_nose_m\": 2.5,                # meters\n",
    "    \"loiter_cl\": 0.8, # lift coefficient at loiter\n",
    "    \"loiter_cd\" : 0.05, # drag coefficient at loiter\n",
    "    \"loiter_lift_to_drag\": 16, # lift-to-drag ratio at loiter\n",
    "    \"loiter_sfc\": 0.5, # specific fuel consumption at loiter (kg/kWh)\n",
    "    \"loiter_rpm\": 5000, # engine RPM at loiter\n",
    "    \"loiter_power_kw\": 8, # power required at loiter (kW)\n",
    "    \"loiter_static_margin\": 0.1, # static margin (dimensionless)\n",
    "    \"loiter_delta_elevator_deg\": 5, # elevator deflection angle (degrees)\n",
    "    \"loiter_cl_tail_required\": -0.04, # required lift coefficient for tail\n",
    "    \"loiter_angle_of_attack_deg\": 5, # needs to be converted to radians for calculations\n",
    "    \"calculated_loiter_time\": hard_constraints[\"loiter_time\"],\n",
    "    \n",
    "    ## cruise back variables\n",
    "    ###############################\n",
    "\n",
    "    \"cruiseback_speed_kmh\": 130,\n",
    "    \"cruiseback_wing_loading_pa\": 180, # starting assumption\n",
    "    \"cruiseback_cg_from_nose_m\": 2.5,                # meters\n",
    "    \"cruiseback_cl\": 0.8, # lift coefficient at cruiseback\n",
    "    \"cruiseback_cd\" : 0.05, # drag coefficient at cruiseback\n",
    "    \"cruiseback_lift_to_drag\": 16, # lift-to-drag ratio at cruiseback\n",
    "    \"cruiseback_sfc\": 0.5, # specific fuel consumption at cruiseback (kg/kWh)\n",
    "    \"cruiseback_rpm\": 5000, # engine RPM at cruiseback\n",
    "    \"cruiseback_power_kw\": 8, # power required at cruiseback (kW)\n",
    "    \"cruiseback_static_margin\": 0.1, # static margin (dimensionless)\n",
    "    \"cruiseback_delta_elevator_deg\": 5, # elevator deflection angle (degrees)\n",
    "    \"cruiseback_cl_tail_required\": -0.04, # required lift coefficient for tail\n",
    "    \"cruiseback_angle_of_attack_deg\": 5, # needs to be converted to radians for calculations\n",
    "\n",
    "    \"cruiseback_time\": 3, # cruiseback time (hours)\n",
    "    \n",
    "    \n",
    "    \n",
    "}\n",
    "\n",
    "predrop = refine_design_from_iterable_constraints(\n",
    "    hard_constraints, \n",
    "    assumed_and_set, \n",
    "    weights_dict_kg_no_fuel,\n",
    "    iterable_constraints,\n",
    "    target_error=0.0005,\n",
    "    max_iterations=60\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d30246c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pre Drop Values\n",
      "===================================\n",
      "Maximum Takeoff Weight:  796.4589178040898\n",
      "Fuel Weight:  14.890434670240598\n",
      "neutral_point_m:  3.716910605548878\n",
      "cg_from_nose_m:  3.423451833609543\n",
      "static_margin:  0.2775170470372533\n",
      "cl_tail_required:  -0.0740045458766009\n",
      "wing_le_position_m:  2.659466477080829\n",
      "payload cg:  3.1881885413148536\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Pre Drop Values\")\n",
    "print(\"===================================\")\n",
    "\n",
    "print(\"Maximum Takeoff Weight: \", predrop[\"mtow\"])\n",
    "print(\"Fuel Weight: \", predrop[\"fuel_kg\"])\n",
    "print(\"neutral_point_m: \",predrop[\"neutral_point_m\"])\n",
    "print(\"cg_from_nose_m: \",predrop[\"cruiseout_cg_from_nose_m\"])\n",
    "print(\"static_margin: \",predrop[\"cruiseout_static_margin\"])\n",
    "# print(\"delta_elevator_deg: \",predrop[\"cruiseout_delta_elevator_deg\"])\n",
    "print(\"cl_tail_required: \",predrop[\"cruiseout_cl_tail_required\"])\n",
    "print(\"wing_le_position_m: \",predrop[\"wing_le_position_m\"])\n",
    "print(\"payload cg: \",predrop[\"wing_le_position_m\"] + iterable_constraints[\"chord_m\"]*0.5)\n",
    "print()\n",
    "# print(\"Post Drop Values\")\n",
    "# print(\"===================================\")\n",
    "# print(\"neutral_point_m: \",postdrop[\"neutral_point_m\"])\n",
    "# print(\"cg_from_nose_m: \",postdrop[\"cg_from_nose_m\"])\n",
    "# print(\"static_margin: \",postdrop[\"static_margin\"])\n",
    "# print(\"delta_elevator_deg: \",postdrop[\"delta_elevator_deg\"])\n",
    "# print(\"cl_tail_required: \",postdrop[\"cl_tail_required\"])\n",
    "# print(\"wing_le_position_m: \",postdrop[\"wing_le_position_m\"])\n",
    "\n",
    "\n",
    "# print()\n",
    "# print()\n",
    "# print(\"horizontal_tail_volume_coefficient: \",assumed_and_set[\"horizontal_tail_volume_coefficient\"])\n",
    "# print(\"vertical_tail_volume_coefficient: \",assumed_and_set[\"vertical_tail_volume_coefficient\"])\n",
    "# print(\"wing_le_position_fuselage_length_coeff: \",assumed_and_set[\"wing_le_position_fuselage_length_coeff\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "453b5ac3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.8751174396042636"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_row_for_cl(airfoil_coeffs_vs_alpha, predrop[\"cruiseout_cl_tail_required\"])[\"alpha\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2d2f8bf3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'wing_area_m2': 15.65463318764173,\n",
       " 'wing_loading_pa': 499.102207634361,\n",
       " 'wing_span_m': 14.804217798552688,\n",
       " 'chord_m': 1.0574441284680491,\n",
       " 'neutral_point_m': 3.716910605548878,\n",
       " 'wing_le_position_m': 2.659466477080829,\n",
       " 'fuselage_body_length_m': 5.318932954161658,\n",
       " 'fuselage_body_width_m': 0.62,\n",
       " 'fuselage_body_height_m': 0.45,\n",
       " 'fuselage_tail_arm_extension_m': 0,\n",
       " 'space_available_for_fuel_m3': 0.23643150712017674,\n",
       " 'tail_arm_m': 3.1723323854041476,\n",
       " 'horizontal_tail_area_m2': 3.913658296910432,\n",
       " 'h_tail_chord_m': 0.9891484085958021,\n",
       " 'h_tail_span_m': 3.956593634383209,\n",
       " 'vertical_tail_area_m2': 2.1916486462698423,\n",
       " 'v_tail_chord_m': 1.046816279551919,\n",
       " 'v_tail_span_m': 2.093632559103838,\n",
       " 'required_fuel_volume_m3': 0.020122209013838644,\n",
       " 'max_theoretical_range': 162.05029223847646,\n",
       " 'stall_speed_kmh': 55,\n",
       " 'fuel_kg': 14.890434670240598,\n",
       " 'mtow': 796.4589178040898,\n",
       " 'cruiseout_speed_kmh': 130,\n",
       " 'cruiseout_wing_loading_pa': 180,\n",
       " 'cruiseout_cg_from_nose_m': 3.423451833609543,\n",
       " 'cruiseout_cl': 0.8000000000000003,\n",
       " 'cruiseout_cd': 0.023679136353359484,\n",
       " 'cruiseout_lift_to_drag': 33.785015976163336,\n",
       " 'cruiseout_sfc': 0.5436221298254789,\n",
       " 'cruiseout_rpm': 1969.8155847876758,\n",
       " 'cruiseout_power_kw': 10.986864941390486,\n",
       " 'cruiseout_static_margin': 0.2775170470372533,\n",
       " 'cruiseout_delta_elevator_deg': -48.32995604306424,\n",
       " 'cruiseout_cl_tail_required': -0.0740045458766009,\n",
       " 'cruiseout_angle_of_attack_deg': 4.900000000000003,\n",
       " 'cruiseout_time': 0.7692307692307693,\n",
       " 'loiter_speed_kmh': 100,\n",
       " 'loiter_wing_loading_pa': 180,\n",
       " 'loiter_cg_from_nose_m': 2.5,\n",
       " 'loiter_cl': 1.3441998562752915,\n",
       " 'loiter_cd': 0.05684228747368736,\n",
       " 'loiter_lift_to_drag': 23.64788462986346,\n",
       " 'loiter_sfc': 0.5364377813448127,\n",
       " 'loiter_rpm': 2029.6851554598938,\n",
       " 'loiter_power_kw': 12.004647642818192,\n",
       " 'loiter_static_margin': 0.1,\n",
       " 'loiter_delta_elevator_deg': 5,\n",
       " 'loiter_cl_tail_required': -0.04,\n",
       " 'loiter_angle_of_attack_deg': 10.969442448267937,\n",
       " 'calculated_loiter_time': 0.39612596174692116,\n",
       " 'cruiseback_speed_kmh': 130,\n",
       " 'cruiseback_wing_loading_pa': 180,\n",
       " 'cruiseback_cg_from_nose_m': 2.5,\n",
       " 'cruiseback_cl': 0.5873505399340426,\n",
       " 'cruiseback_cd': 0.015294531570459218,\n",
       " 'cruiseback_lift_to_drag': 38.40264981168086,\n",
       " 'cruiseback_sfc': 0.5710835408664194,\n",
       " 'cruiseback_rpm': 1740.9704927798373,\n",
       " 'cruiseback_power_kw': 7.096498377257235,\n",
       " 'cruiseback_static_margin': 0.1,\n",
       " 'cruiseback_delta_elevator_deg': 5,\n",
       " 'cruiseback_cl_tail_required': -0.04,\n",
       " 'cruiseback_angle_of_attack_deg': 2.968957777346684,\n",
       " 'cruiseback_time': 0.7692307692307693}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predrop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "bbd5ea7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Estimated Takeoff Distance (with Drag & Resistance): 179.63 meters\n"
     ]
    }
   ],
   "source": [
    "def calculate_takeoff_distance_with_drag(\n",
    "    mtow_kg,\n",
    "    wing_area_m2,\n",
    "    cl_max_takeoff,\n",
    "    thrust_avg_n,\n",
    "    cd_takeoff=0.05,\n",
    "    rolling_resistance_coeff=0.04,  # Dirt road typical value\n",
    "    rho=1.225,  # Sea level air density\n",
    "    g=9.81\n",
    "):\n",
    "    W = mtow_kg * g  # Weight in Newtons\n",
    "    wing_loading_pa = W / wing_area_m2\n",
    "\n",
    "    # Stall and Takeoff Speed\n",
    "    v_stall_ms = np.sqrt((2 * W) / (rho * wing_area_m2 * cl_max_takeoff))\n",
    "    v_takeoff_ms = 1.2 * v_stall_ms  # 20% margin above stall speed\n",
    "\n",
    "    # Assume average speed during takeoff roll is half the takeoff speed\n",
    "    v_avg_ms = v_takeoff_ms / 2\n",
    "\n",
    "    # Calculate average lift during ground roll\n",
    "    lift_avg_n = 0.5 * rho * v_avg_ms**2 * wing_area_m2 * cl_max_takeoff\n",
    "\n",
    "    # Calculate average drag during ground roll\n",
    "    drag_avg_n = 0.5 * rho * v_avg_ms**2 * wing_area_m2 * cd_takeoff\n",
    "\n",
    "    # Net accelerating force\n",
    "    net_force_n = thrust_avg_n - drag_avg_n - rolling_resistance_coeff * (W - lift_avg_n)\n",
    "\n",
    "    if net_force_n <= 0:\n",
    "        return np.inf  # Cannot take off with current configuration\n",
    "\n",
    "    # Final Takeoff Distance\n",
    "    takeoff_distance_m = (v_takeoff_ms ** 2) / (2 * g * (net_force_n / W))\n",
    "\n",
    "    return takeoff_distance_m\n",
    "\n",
    "# Example Usage\n",
    "mtow_kg = iterable_constraints[\"mtow\"]\n",
    "wing_area_m2 = iterable_constraints[\"wing_area_m2\"]\n",
    "cl_max_takeoff = 1.8\n",
    "cd_takeoff = 0.05\n",
    "prop_efficiency = 0.8\n",
    "rolling_resistance_coeff = 0.04\n",
    "max_power_kw = 55\n",
    "rho=1.225\n",
    "\n",
    "# Calculate available thrust at takeoff speed\n",
    "power_available_w = max_power_kw * 1000 * prop_efficiency\n",
    "v_takeoff_ms = 1.2 * np.sqrt((2 * mtow_kg * g) / (rho * wing_area_m2 * cl_max_takeoff))\n",
    "thrust_avg_n = power_available_w / v_takeoff_ms\n",
    "\n",
    "# Calculate Takeoff Distance with Drag and Rolling Resistance\n",
    "takeoff_distance_m = calculate_takeoff_distance_with_drag(\n",
    "    mtow_kg, wing_area_m2, cl_max_takeoff, thrust_avg_n,\n",
    "    cd_takeoff, rolling_resistance_coeff\n",
    ")\n",
    "\n",
    "print(f\"Estimated Takeoff Distance (with Drag & Resistance): {takeoff_distance_m:.2f} meters\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "aefcad76",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.patches as patches\n",
    "\n",
    "def plot_uav_top_view(fuselage_length, fuselage_width,\n",
    "                      wing_span, wing_chord, wing_le_position,\n",
    "                      tail_span, tail_chord, tail_le_position,\n",
    "                      components=None, cg_position=None, np_position=None):\n",
    "    \"\"\"\n",
    "    Plot the top view of a UAV with rectangular fuselage, wing, tail, CG, NP, and other components.\n",
    "\n",
    "    Parameters:\n",
    "        fuselage_length (float)\n",
    "        fuselage_width (float)\n",
    "        wing_span (float)\n",
    "        wing_chord (float)\n",
    "        wing_le_position (float)\n",
    "        tail_span (float)\n",
    "        tail_chord (float)\n",
    "        tail_le_position (float)\n",
    "        components (dict): Optional dict of {label: x_position}\n",
    "        cg_position (float): X location of CG\n",
    "        np_position (float): X location of Neutral Point\n",
    "    \"\"\"\n",
    "    fig, ax = plt.subplots(figsize=(30, 10))\n",
    "    \n",
    "    # Draw fuselage\n",
    "    fuselage = patches.Rectangle((0, -fuselage_width / 2),\n",
    "                                 fuselage_length,\n",
    "                                 fuselage_width,\n",
    "                                 edgecolor='black',\n",
    "                                 facecolor='lightgray',\n",
    "                                 label='Fuselage')\n",
    "    ax.add_patch(fuselage)\n",
    "\n",
    "    # Draw wing\n",
    "    wing = patches.Rectangle((wing_le_position, -wing_span / 2),\n",
    "                             wing_chord,\n",
    "                             wing_span,\n",
    "                             edgecolor='blue',\n",
    "                             facecolor='lightblue',\n",
    "                             label='Wing')\n",
    "    ax.add_patch(wing)\n",
    "\n",
    "    # Draw tail\n",
    "    tail = patches.Rectangle((tail_le_position, -tail_span / 2),\n",
    "                             tail_chord,\n",
    "                             tail_span,\n",
    "                             edgecolor='darkred',\n",
    "                             facecolor='salmon',\n",
    "                             label='Tail')\n",
    "\n",
    "    ax.add_patch(tail)\n",
    "\n",
    "    # Draw propeller\n",
    "    propeller = patches.Rectangle((fuselage_length, -propeller_specs[\"diameter_m\"] / 2),\n",
    "                             0.1,\n",
    "                             propeller_specs[\"diameter_m\"],\n",
    "                             edgecolor='darkred',\n",
    "                             facecolor='red',\n",
    "                             label='Prop')\n",
    "    \n",
    "    ax.add_patch(propeller)\n",
    "\n",
    "    # Plot CG\n",
    "    if cg_position is not None:\n",
    "        ax.plot(cg_position, 0, marker='o', color='green', markersize=8, label='CG')\n",
    "        ax.annotate(\"CG\", (cg_position, 0.3), color='green', ha='center')\n",
    "\n",
    "    # Plot NP\n",
    "    if np_position is not None:\n",
    "        ax.plot(np_position, 0, marker='^', color='purple', markersize=8, label='NP')\n",
    "        ax.annotate(\"NP\", (np_position, -0.3), color='purple', ha='center')\n",
    "\n",
    "    # Plot other components\n",
    "    if components:\n",
    "        for label, x in components.items():\n",
    "            ax.plot(x, 0, marker='s', color='black', markersize=6)\n",
    "            ax.annotate(label, (x, -1), ha='center', fontsize=8, rotation=90)\n",
    "\n",
    "    # Set limits and formatting\n",
    "    ax.set_aspect('equal')\n",
    "    ax.set_xlabel(\"X (m)\")\n",
    "    ax.set_ylabel(\"Y (m)\")\n",
    "    ax.set_title(\"Top View of UAV Layout with CG and NP\")\n",
    "\n",
    "    x_max = max(fuselage_length, wing_le_position + wing_chord, tail_le_position + tail_chord)\n",
    "    y_max = max(wing_span, tail_span) / 2\n",
    "\n",
    "    ax.set_xlim(-0.1 * fuselage_length, x_max * 1.1)\n",
    "    ax.set_ylim(-y_max * 1.2, y_max * 1.2)\n",
    "\n",
    "    ax.grid(True)\n",
    "    ax.legend()\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "85d4a13c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 3000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "components = estimate_component_positions(predrop[\"fuselage_body_length_m\"], predrop[\"wing_le_position_m\"], predrop[\"chord_m\"], \n",
    "                             predrop[\"tail_arm_m\"], hard_constraints[\"internal_payload_length\"], assumed_and_set[\"fuselage_fuel_tank_length\"], \n",
    "                             cg_estimate=predrop[\"cruiseout_cg_from_nose_m\"])\n",
    "\n",
    "# components = {\"avionics\":components[\"avionics\"], \"Payload\":components[\"internal_payload\"]}\n",
    "\n",
    "components = {}\n",
    "\n",
    "h_tail_le_position = predrop[\"cruiseout_cg_from_nose_m\"] + predrop[\"tail_arm_m\"] - 0.25 * predrop[\"h_tail_chord_m\"]\n",
    "\n",
    "plot_uav_top_view(\n",
    "    fuselage_length=predrop[\"fuselage_body_length_m\"],\n",
    "    fuselage_width=predrop[\"fuselage_body_width_m\"],\n",
    "    wing_span=predrop[\"wing_span_m\"],\n",
    "    wing_chord=predrop[\"chord_m\"],\n",
    "    wing_le_position=predrop[\"wing_le_position_m\"],\n",
    "    tail_span=predrop[\"h_tail_span_m\"],\n",
    "    tail_chord=predrop[\"h_tail_chord_m\"],\n",
    "    tail_le_position=h_tail_le_position,\n",
    "    components=components,\n",
    "    cg_position=predrop[\"cruiseout_cg_from_nose_m\"],\n",
    "    np_position=predrop[\"neutral_point_m\"],\n",
    ")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "8836ad29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'fuselage': 5.005870365706593,\n",
       " 'wing': 5.401860245640981,\n",
       " 'tails': 9.010566658271868,\n",
       " 'engine': 9.511153694842525,\n",
       " 'propeller': 10.011740731413186,\n",
       " 'wing_payload': 5.4458591211892475,\n",
       " 'wing_fuel': 5.401860245640981,\n",
       " 'fuselage_fuel': 4.7308703657065925,\n",
       " 'avionics': 1.0011740731413186,\n",
       " 'landing_gear': 4.921830136826953,\n",
       " 'misc': 5.923004209968272}"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "components"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc47a0aa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "uav",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
